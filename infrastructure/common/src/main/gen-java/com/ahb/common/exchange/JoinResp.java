/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ahb.common.exchange;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-03-22")
public class JoinResp implements org.apache.thrift.TBase<JoinResp, JoinResp._Fields>, java.io.Serializable, Cloneable, Comparable<JoinResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JoinResp");

  private static final org.apache.thrift.protocol.TField EX_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("exInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField JOINER_FIELD_DESC = new org.apache.thrift.protocol.TField("joiner", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JoinRespStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JoinRespTupleSchemeFactory();

  public ExchangeInfo exInfo; // required
  public NodeAxis target; // required
  public NodeAxis joiner; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EX_INFO((short)1, "exInfo"),
    TARGET((short)2, "target"),
    JOINER((short)3, "joiner");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EX_INFO
          return EX_INFO;
        case 2: // TARGET
          return TARGET;
        case 3: // JOINER
          return JOINER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EX_INFO, new org.apache.thrift.meta_data.FieldMetaData("exInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExchangeInfo.class)));
    tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeAxis.class)));
    tmpMap.put(_Fields.JOINER, new org.apache.thrift.meta_data.FieldMetaData("joiner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeAxis.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JoinResp.class, metaDataMap);
  }

  public JoinResp() {
  }

  public JoinResp(
    ExchangeInfo exInfo,
    NodeAxis target,
    NodeAxis joiner)
  {
    this();
    this.exInfo = exInfo;
    this.target = target;
    this.joiner = joiner;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JoinResp(JoinResp other) {
    if (other.isSetExInfo()) {
      this.exInfo = new ExchangeInfo(other.exInfo);
    }
    if (other.isSetTarget()) {
      this.target = new NodeAxis(other.target);
    }
    if (other.isSetJoiner()) {
      this.joiner = new NodeAxis(other.joiner);
    }
  }

  public JoinResp deepCopy() {
    return new JoinResp(this);
  }

  @Override
  public void clear() {
    this.exInfo = null;
    this.target = null;
    this.joiner = null;
  }

  public ExchangeInfo getExInfo() {
    return this.exInfo;
  }

  public JoinResp setExInfo(ExchangeInfo exInfo) {
    this.exInfo = exInfo;
    return this;
  }

  public void unsetExInfo() {
    this.exInfo = null;
  }

  /** Returns true if field exInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetExInfo() {
    return this.exInfo != null;
  }

  public void setExInfoIsSet(boolean value) {
    if (!value) {
      this.exInfo = null;
    }
  }

  public NodeAxis getTarget() {
    return this.target;
  }

  public JoinResp setTarget(NodeAxis target) {
    this.target = target;
    return this;
  }

  public void unsetTarget() {
    this.target = null;
  }

  /** Returns true if field target is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget() {
    return this.target != null;
  }

  public void setTargetIsSet(boolean value) {
    if (!value) {
      this.target = null;
    }
  }

  public NodeAxis getJoiner() {
    return this.joiner;
  }

  public JoinResp setJoiner(NodeAxis joiner) {
    this.joiner = joiner;
    return this;
  }

  public void unsetJoiner() {
    this.joiner = null;
  }

  /** Returns true if field joiner is set (has been assigned a value) and false otherwise */
  public boolean isSetJoiner() {
    return this.joiner != null;
  }

  public void setJoinerIsSet(boolean value) {
    if (!value) {
      this.joiner = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case EX_INFO:
      if (value == null) {
        unsetExInfo();
      } else {
        setExInfo((ExchangeInfo)value);
      }
      break;

    case TARGET:
      if (value == null) {
        unsetTarget();
      } else {
        setTarget((NodeAxis)value);
      }
      break;

    case JOINER:
      if (value == null) {
        unsetJoiner();
      } else {
        setJoiner((NodeAxis)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case EX_INFO:
      return getExInfo();

    case TARGET:
      return getTarget();

    case JOINER:
      return getJoiner();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case EX_INFO:
      return isSetExInfo();
    case TARGET:
      return isSetTarget();
    case JOINER:
      return isSetJoiner();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof JoinResp)
      return this.equals((JoinResp)that);
    return false;
  }

  public boolean equals(JoinResp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_exInfo = true && this.isSetExInfo();
    boolean that_present_exInfo = true && that.isSetExInfo();
    if (this_present_exInfo || that_present_exInfo) {
      if (!(this_present_exInfo && that_present_exInfo))
        return false;
      if (!this.exInfo.equals(that.exInfo))
        return false;
    }

    boolean this_present_target = true && this.isSetTarget();
    boolean that_present_target = true && that.isSetTarget();
    if (this_present_target || that_present_target) {
      if (!(this_present_target && that_present_target))
        return false;
      if (!this.target.equals(that.target))
        return false;
    }

    boolean this_present_joiner = true && this.isSetJoiner();
    boolean that_present_joiner = true && that.isSetJoiner();
    if (this_present_joiner || that_present_joiner) {
      if (!(this_present_joiner && that_present_joiner))
        return false;
      if (!this.joiner.equals(that.joiner))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetExInfo()) ? 131071 : 524287);
    if (isSetExInfo())
      hashCode = hashCode * 8191 + exInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetTarget()) ? 131071 : 524287);
    if (isSetTarget())
      hashCode = hashCode * 8191 + target.hashCode();

    hashCode = hashCode * 8191 + ((isSetJoiner()) ? 131071 : 524287);
    if (isSetJoiner())
      hashCode = hashCode * 8191 + joiner.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(JoinResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetExInfo()).compareTo(other.isSetExInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exInfo, other.exInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTarget()).compareTo(other.isSetTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, other.target);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetJoiner()).compareTo(other.isSetJoiner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoiner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.joiner, other.joiner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("JoinResp(");
    boolean first = true;

    sb.append("exInfo:");
    if (this.exInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.exInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("target:");
    if (this.target == null) {
      sb.append("null");
    } else {
      sb.append(this.target);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("joiner:");
    if (this.joiner == null) {
      sb.append("null");
    } else {
      sb.append(this.joiner);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (exInfo != null) {
      exInfo.validate();
    }
    if (target != null) {
      target.validate();
    }
    if (joiner != null) {
      joiner.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JoinRespStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JoinRespStandardScheme getScheme() {
      return new JoinRespStandardScheme();
    }
  }

  private static class JoinRespStandardScheme extends org.apache.thrift.scheme.StandardScheme<JoinResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JoinResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EX_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.exInfo = new ExchangeInfo();
              struct.exInfo.read(iprot);
              struct.setExInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.target = new NodeAxis();
              struct.target.read(iprot);
              struct.setTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JOINER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.joiner = new NodeAxis();
              struct.joiner.read(iprot);
              struct.setJoinerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JoinResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.exInfo != null) {
        oprot.writeFieldBegin(EX_INFO_FIELD_DESC);
        struct.exInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.target != null) {
        oprot.writeFieldBegin(TARGET_FIELD_DESC);
        struct.target.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.joiner != null) {
        oprot.writeFieldBegin(JOINER_FIELD_DESC);
        struct.joiner.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JoinRespTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JoinRespTupleScheme getScheme() {
      return new JoinRespTupleScheme();
    }
  }

  private static class JoinRespTupleScheme extends org.apache.thrift.scheme.TupleScheme<JoinResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JoinResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetExInfo()) {
        optionals.set(0);
      }
      if (struct.isSetTarget()) {
        optionals.set(1);
      }
      if (struct.isSetJoiner()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetExInfo()) {
        struct.exInfo.write(oprot);
      }
      if (struct.isSetTarget()) {
        struct.target.write(oprot);
      }
      if (struct.isSetJoiner()) {
        struct.joiner.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JoinResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.exInfo = new ExchangeInfo();
        struct.exInfo.read(iprot);
        struct.setExInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.target = new NodeAxis();
        struct.target.read(iprot);
        struct.setTargetIsSet(true);
      }
      if (incoming.get(2)) {
        struct.joiner = new NodeAxis();
        struct.joiner.read(iprot);
        struct.setJoinerIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

