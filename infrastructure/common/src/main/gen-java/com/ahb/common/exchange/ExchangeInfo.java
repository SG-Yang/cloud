/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ahb.common.exchange;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-03-14")
public class ExchangeInfo implements org.apache.thrift.TBase<ExchangeInfo, ExchangeInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ExchangeInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExchangeInfo");

  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FROM_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromNode", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField E_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("eType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField INIT_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("initNode", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("step", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExchangeInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExchangeInfoTupleSchemeFactory();

  public java.lang.String token; // required
  public NodeAxis fromNode; // required
  /**
   * 
   * @see ExchangeType
   */
  public ExchangeType eType; // required
  public NodeAxis initNode; // required
  public int step; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOKEN((short)1, "token"),
    FROM_NODE((short)2, "fromNode"),
    /**
     * 
     * @see ExchangeType
     */
    E_TYPE((short)3, "eType"),
    INIT_NODE((short)4, "initNode"),
    STEP((short)5, "step");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOKEN
          return TOKEN;
        case 2: // FROM_NODE
          return FROM_NODE;
        case 3: // E_TYPE
          return E_TYPE;
        case 4: // INIT_NODE
          return INIT_NODE;
        case 5: // STEP
          return STEP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STEP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_NODE, new org.apache.thrift.meta_data.FieldMetaData("fromNode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeAxis.class)));
    tmpMap.put(_Fields.E_TYPE, new org.apache.thrift.meta_data.FieldMetaData("eType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ExchangeType.class)));
    tmpMap.put(_Fields.INIT_NODE, new org.apache.thrift.meta_data.FieldMetaData("initNode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeAxis.class)));
    tmpMap.put(_Fields.STEP, new org.apache.thrift.meta_data.FieldMetaData("step", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExchangeInfo.class, metaDataMap);
  }

  public ExchangeInfo() {
  }

  public ExchangeInfo(
    java.lang.String token,
    NodeAxis fromNode,
    ExchangeType eType,
    NodeAxis initNode,
    int step)
  {
    this();
    this.token = token;
    this.fromNode = fromNode;
    this.eType = eType;
    this.initNode = initNode;
    this.step = step;
    setStepIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExchangeInfo(ExchangeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetFromNode()) {
      this.fromNode = new NodeAxis(other.fromNode);
    }
    if (other.isSetEType()) {
      this.eType = other.eType;
    }
    if (other.isSetInitNode()) {
      this.initNode = new NodeAxis(other.initNode);
    }
    this.step = other.step;
  }

  public ExchangeInfo deepCopy() {
    return new ExchangeInfo(this);
  }

  @Override
  public void clear() {
    this.token = null;
    this.fromNode = null;
    this.eType = null;
    this.initNode = null;
    setStepIsSet(false);
    this.step = 0;
  }

  public java.lang.String getToken() {
    return this.token;
  }

  public ExchangeInfo setToken(java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public NodeAxis getFromNode() {
    return this.fromNode;
  }

  public ExchangeInfo setFromNode(NodeAxis fromNode) {
    this.fromNode = fromNode;
    return this;
  }

  public void unsetFromNode() {
    this.fromNode = null;
  }

  /** Returns true if field fromNode is set (has been assigned a value) and false otherwise */
  public boolean isSetFromNode() {
    return this.fromNode != null;
  }

  public void setFromNodeIsSet(boolean value) {
    if (!value) {
      this.fromNode = null;
    }
  }

  /**
   * 
   * @see ExchangeType
   */
  public ExchangeType getEType() {
    return this.eType;
  }

  /**
   * 
   * @see ExchangeType
   */
  public ExchangeInfo setEType(ExchangeType eType) {
    this.eType = eType;
    return this;
  }

  public void unsetEType() {
    this.eType = null;
  }

  /** Returns true if field eType is set (has been assigned a value) and false otherwise */
  public boolean isSetEType() {
    return this.eType != null;
  }

  public void setETypeIsSet(boolean value) {
    if (!value) {
      this.eType = null;
    }
  }

  public NodeAxis getInitNode() {
    return this.initNode;
  }

  public ExchangeInfo setInitNode(NodeAxis initNode) {
    this.initNode = initNode;
    return this;
  }

  public void unsetInitNode() {
    this.initNode = null;
  }

  /** Returns true if field initNode is set (has been assigned a value) and false otherwise */
  public boolean isSetInitNode() {
    return this.initNode != null;
  }

  public void setInitNodeIsSet(boolean value) {
    if (!value) {
      this.initNode = null;
    }
  }

  public int getStep() {
    return this.step;
  }

  public ExchangeInfo setStep(int step) {
    this.step = step;
    setStepIsSet(true);
    return this;
  }

  public void unsetStep() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STEP_ISSET_ID);
  }

  /** Returns true if field step is set (has been assigned a value) and false otherwise */
  public boolean isSetStep() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STEP_ISSET_ID);
  }

  public void setStepIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STEP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((java.lang.String)value);
      }
      break;

    case FROM_NODE:
      if (value == null) {
        unsetFromNode();
      } else {
        setFromNode((NodeAxis)value);
      }
      break;

    case E_TYPE:
      if (value == null) {
        unsetEType();
      } else {
        setEType((ExchangeType)value);
      }
      break;

    case INIT_NODE:
      if (value == null) {
        unsetInitNode();
      } else {
        setInitNode((NodeAxis)value);
      }
      break;

    case STEP:
      if (value == null) {
        unsetStep();
      } else {
        setStep((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TOKEN:
      return getToken();

    case FROM_NODE:
      return getFromNode();

    case E_TYPE:
      return getEType();

    case INIT_NODE:
      return getInitNode();

    case STEP:
      return getStep();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TOKEN:
      return isSetToken();
    case FROM_NODE:
      return isSetFromNode();
    case E_TYPE:
      return isSetEType();
    case INIT_NODE:
      return isSetInitNode();
    case STEP:
      return isSetStep();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ExchangeInfo)
      return this.equals((ExchangeInfo)that);
    return false;
  }

  public boolean equals(ExchangeInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_fromNode = true && this.isSetFromNode();
    boolean that_present_fromNode = true && that.isSetFromNode();
    if (this_present_fromNode || that_present_fromNode) {
      if (!(this_present_fromNode && that_present_fromNode))
        return false;
      if (!this.fromNode.equals(that.fromNode))
        return false;
    }

    boolean this_present_eType = true && this.isSetEType();
    boolean that_present_eType = true && that.isSetEType();
    if (this_present_eType || that_present_eType) {
      if (!(this_present_eType && that_present_eType))
        return false;
      if (!this.eType.equals(that.eType))
        return false;
    }

    boolean this_present_initNode = true && this.isSetInitNode();
    boolean that_present_initNode = true && that.isSetInitNode();
    if (this_present_initNode || that_present_initNode) {
      if (!(this_present_initNode && that_present_initNode))
        return false;
      if (!this.initNode.equals(that.initNode))
        return false;
    }

    boolean this_present_step = true;
    boolean that_present_step = true;
    if (this_present_step || that_present_step) {
      if (!(this_present_step && that_present_step))
        return false;
      if (this.step != that.step)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    hashCode = hashCode * 8191 + ((isSetFromNode()) ? 131071 : 524287);
    if (isSetFromNode())
      hashCode = hashCode * 8191 + fromNode.hashCode();

    hashCode = hashCode * 8191 + ((isSetEType()) ? 131071 : 524287);
    if (isSetEType())
      hashCode = hashCode * 8191 + eType.getValue();

    hashCode = hashCode * 8191 + ((isSetInitNode()) ? 131071 : 524287);
    if (isSetInitNode())
      hashCode = hashCode * 8191 + initNode.hashCode();

    hashCode = hashCode * 8191 + step;

    return hashCode;
  }

  @Override
  public int compareTo(ExchangeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFromNode()).compareTo(other.isSetFromNode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromNode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromNode, other.fromNode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEType()).compareTo(other.isSetEType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eType, other.eType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInitNode()).compareTo(other.isSetInitNode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitNode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initNode, other.initNode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStep()).compareTo(other.isSetStep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.step, other.step);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ExchangeInfo(");
    boolean first = true;

    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromNode:");
    if (this.fromNode == null) {
      sb.append("null");
    } else {
      sb.append(this.fromNode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eType:");
    if (this.eType == null) {
      sb.append("null");
    } else {
      sb.append(this.eType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("initNode:");
    if (this.initNode == null) {
      sb.append("null");
    } else {
      sb.append(this.initNode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("step:");
    sb.append(this.step);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (fromNode != null) {
      fromNode.validate();
    }
    if (initNode != null) {
      initNode.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExchangeInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExchangeInfoStandardScheme getScheme() {
      return new ExchangeInfoStandardScheme();
    }
  }

  private static class ExchangeInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExchangeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExchangeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FROM_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fromNode = new NodeAxis();
              struct.fromNode.read(iprot);
              struct.setFromNodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // E_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eType = com.ahb.common.exchange.ExchangeType.findByValue(iprot.readI32());
              struct.setETypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INIT_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.initNode = new NodeAxis();
              struct.initNode.read(iprot);
              struct.setInitNodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STEP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.step = iprot.readI32();
              struct.setStepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExchangeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      if (struct.fromNode != null) {
        oprot.writeFieldBegin(FROM_NODE_FIELD_DESC);
        struct.fromNode.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.eType != null) {
        oprot.writeFieldBegin(E_TYPE_FIELD_DESC);
        oprot.writeI32(struct.eType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.initNode != null) {
        oprot.writeFieldBegin(INIT_NODE_FIELD_DESC);
        struct.initNode.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STEP_FIELD_DESC);
      oprot.writeI32(struct.step);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExchangeInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExchangeInfoTupleScheme getScheme() {
      return new ExchangeInfoTupleScheme();
    }
  }

  private static class ExchangeInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExchangeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExchangeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetToken()) {
        optionals.set(0);
      }
      if (struct.isSetFromNode()) {
        optionals.set(1);
      }
      if (struct.isSetEType()) {
        optionals.set(2);
      }
      if (struct.isSetInitNode()) {
        optionals.set(3);
      }
      if (struct.isSetStep()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetFromNode()) {
        struct.fromNode.write(oprot);
      }
      if (struct.isSetEType()) {
        oprot.writeI32(struct.eType.getValue());
      }
      if (struct.isSetInitNode()) {
        struct.initNode.write(oprot);
      }
      if (struct.isSetStep()) {
        oprot.writeI32(struct.step);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExchangeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fromNode = new NodeAxis();
        struct.fromNode.read(iprot);
        struct.setFromNodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.eType = com.ahb.common.exchange.ExchangeType.findByValue(iprot.readI32());
        struct.setETypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.initNode = new NodeAxis();
        struct.initNode.read(iprot);
        struct.setInitNodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.step = iprot.readI32();
        struct.setStepIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

